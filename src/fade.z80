;
; Game Boy fade routine
;
; Copyright 2018 Damian Yerrick
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"

section "fadewram", WRAM0
fade_level:: ds 1
fade_dir: ds 1
fade_bgp:: ds 1
fade_obp0:: ds 1
fade_obp1:: ds 1
fade_density:: ds 10
fade_residue: ds 10

section "fadecmds",ROM0
fade_in::
  ld hl,fade_level
  xor a
  ld [hl+], a
  ld [hl], 1   ; fade rate: 32 frames to full

  ; initialize other fade related things
  ld hl, initial_fade_density
  ld de, fade_density
  ld bc, 10
  call memcpy

  ; SGB: want to make solid light gray, not a mix of light gray
  ; and white
  ld a, [hw_capability]
  rra
  jr nc, .no_sgb_fixes
    ld hl, fade_density+5
    inc [hl]
  .no_sgb_fixes:


  ; at this point de = fade_residue, so clear it
  ld h, d
  ld l, e
  ld c, 10
  xor a
  jp memset_tiny

initial_fade_density:
  db 6, 4, 2, 0, 6, 1, 0, 6, 3, 0

FADE_MAX = 32

fade_out::
  ld hl,fade_level
  ld a, FADE_MAX
  ld [hl+],a
  ld [hl],-1
  ret

section "fade", ROM0
fade_update::
  ld hl, fade_level
  ld a, [hl+]
  add [hl]  ; A = new fade level
  cp 128
  jr c, .new_fade_level_not_negative
    ; Faded completely to white. Set both rate and level to white.
    xor a
    ld [hl-], a
    jr .have_new_fade_level
  .new_fade_level_not_negative:
  cp FADE_MAX
  jr nc, .faded_completely_in
    dec hl  ; no update to fade level
    jr .have_new_fade_level
  .faded_completely_in:
    ; Faded completely in.
    xor a
    ld [hl-], a
    ld a, FADE_MAX
  .have_new_fade_level:
  ld [hl], a

  ; Calculate values for BGP, OBP0, and OBP1
  ld hl, fade_density+0
  ld c, $80
  call calc_dmg_palette_byte
  ld [fade_bgp],a
  ld c, $20
  call calc_dmg_palette_byte
  ld [fade_obp0], a
  ld c, $20
  call calc_dmg_palette_byte
  ld [fade_obp1], a

  ; If needed, calculate GBC fade level
  ld a, [hw_capability]
  rlca
  ret nc
  ld a, 2
  ldh [rSVBK], a
  ld hl, gbcfade_palette
  ld de, gbcfade_faded
  ld b, gbc_ingame_palette_end - gbc_ingame_palette
  call gbcfade_calc_white
  ld hl, gbcfade_faded
  ld de, gbcfade_dest
  ld b, (gbc_ingame_palette_end - gbc_ingame_palette)/3
  call gbcfade_combine_components
  ld a, 1
  ldh [rSVBK], a
  ret


;;
; @param HL fade_density to start
; @param C $02 << (number of palette entries to compute * 2 - 2)
; @return value suitable for BGP, OBP0, or OBP1
calc_dmg_palette_byte:
  ld a, [fade_level]
  ld b, a
  .nextpalent:
    push bc
    ld c, [hl]
    ; Multiply fade level (b, 0-32) by density (c, 0-6)
    xor a
    rr c
    jr nc,.nobit0
      add b
    .nobit0:
    sla b
    rr c
    jr nc,.nobit1
      add b
    .nobit1:
    sla b
    rr c
    jr nc,.nobit2
      add b
    .nobit2:

    ; Add to the residue
    ld de, fade_residue - fade_density
    add hl, de
    add [hl]
    jr nc, .no_residue_overflow
      ld a, 255  ; overflow may happen with density level 7
    .no_residue_overflow:
    ld c, a
    and $3F  ; write back low 8 bits
    ld [hl], a
    ld de, fade_density + 1 - fade_residue
    add hl, de
    ld a, c

    ; Keep the color bits
    and $C0
    pop bc
    srl c
    srl c
    jr c, .islastcolor
    or c
    ld c, a
    jr .nextpalent
  .islastcolor:
  or c
  ret


; Game Boy Color fading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "gbcfadewram", WRAMX, BANK[2], align[8]
gbcfade_palette: ds 192
gbcfade_faded:   ds 192  ; CROSSES page boundary
gbcfade_dest:    ds 128

section "gbcfadecode", ROM0

;;
; UNTESTED
; Loads native GBC palette data in hblank.
; @param A offset into palette memory (0, 8, 16, ..., 56) plus $80
; @param B number of 4-color or 8-byte subpalettes to copy
; @param C palette port to write: LOW(rBCPS) or LOW(rOCPS)
; @param HL data source
; @return HL at end, C increased by 1, B = 0
set_gbc_palette_hblank:
  ld [$FF00+c],a
  inc c

  ; catch all VRAM slots
  di
  ld a, 2
  ldh [rSVBK], a
  ldh a, [rIE]
  ld d, a
  ldh a, [rSTAT]
  ld e, a
  push de
  ld a, IEF_LCDC      ; listen only to STAT
  ldh [rIE], a
  ld a, STATF_MODE00  ; STAT on hblank
  ldh [rSTAT], a

.palblastloop:
  xor a
  ldh [rIF], a
  ld a, [hl+]
  halt
  ; At worst, we get 85 dots of mode 0 plus 80 dots of mode 2
  ; on next line, for 165 dots or 41 cycles. We'll use 30.
  ld [$FF00+c], a
    rept 7
    ld a, [hl+]
    ld [$FF00+c], a
  endr
  dec b
  jr nz, .palblastloop

  pop de
  ld a, e
  ldh [rSTAT], a
  ld a, d
  ldh [rIE], a
  ld a, 1
  ldh [rSVBK], a
  reti

gbc_ingame_push_palette::
  ld a, [hw_capability]
  rlca
  ret nc
  ld a, 2
  ldh [rSVBK], a

  ld hl, gbcfade_dest
  ld bc, 5 * 256 + low(rBCPS)
  ld a, $80
  call set_gbc_palette_hblank
  ld bc, 1 * 256 + low(rOCPS)
  ld a, $80
  call set_gbc_palette_hblank

  ld a, 1
  ldh [rSVBK], a
  ret

; It takes 72 scanlines just to calculate a fade level, let alone
; push them to the VCE
;;
; UNTESTED
; Calculate fade to white for Game Boy Color
; @param HL palette source
; @param DE palette destination
; @param B  ; number of components
gbcfade_calc_white:
  ld a, [fade_level]  ; value from 0 to 32
  add 2
  cp FADE_MAX
  jr c, .do_multiply_fade
    ld c, b
    ld b, 0
    jp memcpy
  .do_multiply_fade:
  ; Each component takes quite a while to fade
  and $1C
  add a
  add a
  add a
  ld c, a

  .componentloop:
    ; 31 cycles per component
    ; if fading 64 colors that's 5952 cycles or 52 lines
    ld a, $FC
    sub c
    bit 5, c
    jr z, .noadd4
      add [hl]
    .noadd4:
    rra
    bit 6, c
    jr z, .noadd2
      add [hl]
    .noadd2:
    rra
    bit 7, c
    jr z, .noadd1
      add [hl]
    .noadd1:
    rra
    ld [de], a
    inc de
    inc hl
    dec b
    jr nz, .componentloop
  ret

;;
; UNTESTED
; Combine red, green, and blue components of colors into RGB555 words
; 35 cycles per color; for 64 colors that's 2240 cycles or 20 lines
gbcfade_combine_components:
  ; first byte: 15 cycles
  ld a, [hl+]  ; red, 0-31
  ld c, a
  ld a, [hl]   ; green
  and $07
  rrca
  rrca
  rrca
  or c
  ld [de], a
  inc de
  ; second byte: 16 cycles
  ld a, [hl+]  ; green
  and $18
  rrca
  rrca
  rrca
  ld c, a
  ld a, [hl+]  ; blue
  add a
  add a
  or c
  ld [de], a
  inc de
  ; loop: 4 cycles
  dec b
  jr nz, gbcfade_combine_components
  ret

gbc_fade_init::
  ld a, [hw_capability]
  rlca
  ret nc
  ld a, 2
  ld [rSVBK], a
  ld hl, gbc_ingame_palette
  ld bc, gbc_ingame_palette_end - gbc_ingame_palette
  ld de, gbcfade_palette
  call memcpy
  ld a, 1
  ld [rSVBK], a
  ret

section "gbc_palettes", ROM0
gbc_ingame_palette:
  db  0, 0, 0  ; BC0: gray (for dark gray and white tiles)
  db 11,11,11
  db 21,21,21
  db 31,31,31
  db  0, 0, 0  ; BC1: blue (for black tiles)
  db  4, 4,20
  db 16,16,31
  db 31,31,31
  db  0, 0, 0  ; BC2: green (for light gray tiles)
  db  4,18, 4
  db 12,27,12
  db 31,31,31
  db  0, 0, 0  ; BC3: walls
  db 18, 4, 4
  db 27,18, 0
  db 27,22,18
  db  0, 0, 0  ; BC4: status and border
  db 18, 8, 0
  db 27,27,27
  db 31,31,31
  db 31, 0,31  ; OC0: Libbet
  db  7, 4, 0
  db 31,15,11
  db 31,31,11
gbc_ingame_palette_end:
