;
; Achievements gathering for GB port of Magic Floor
;
; Copyright 2019 Damian Yerrick
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

section "achievements_ram", WRAM0

achievements_found_since_power: ds NUM_ACHIEVEMENTS
last_exit_distance: ds 1
achievements_init_clear_end:

; Floor on which each was earned, or $FF for none
achievements_found_this_game:: ds NUM_ACHIEVEMENTS

section "achievements", ROM0
achievements_init::
  ; In case we decide to show achievements only once per power cycle
  xor a
  ld c,achievements_init_clear_end - achievements_found_since_power
  ld hl,achievements_found_since_power
  jp memset_tiny

achievements_new_game::
  ld a,$FF
  ld c,NUM_ACHIEVEMENTS
  ld hl,achievements_found_this_game
  jp memset_tiny

achievements_new_floor::
  ld a,[attract_mode]
  or a
  ret nz

  ; TODO: prep Restless
  ret

achievements_frame::
  ld a,[attract_mode]
  or a
  ret nz

  call get_exit_distance
  ld b,a
  ld a,[last_exit_distance]
  cp b
  jr nc,.distance_did_not_increase
    ld hl,move_flags
    set MVFB_RETREATED_SINCE_100,[hl]
  .distance_did_not_increase:
  ld a,b
  ld [last_exit_distance],a
  ret

achievements_end_floor::
  ld a,[attract_mode]
  or a
  ret nz

  ; "Sink it": Reach 100% by moving to a dead end
  ld hl,move_flags
  bit MVFB_MOVED_SINCE_100,[hl]
  jr nz,.not_sink_it
    ld a,ACH_100PCT_DEADEND
    call achievements_earn
    jr .not_dash_for_the_door
  .not_sink_it:

  ; "Dash for the door": Clear without having hesitated or increased
  ; Manhattan distance from door since reaching 100%
  bit MVFB_PAUSED_SINCE_100,[hl]
  jr nz,.not_dash_for_the_door
  bit MVFB_RETREATED_SINCE_100,[hl]
  jr nz,.not_dash_for_the_door
  ld a,ACH_DASH_FOR_DOOR
  call achievements_earn

.not_dash_for_the_door:

  ; "Completionist": Finish final floor with all floor scores
  ; equal to maximum
  ld a,[cur_floor]
  cp NUM_FLOORS - 1
  jr nz,.not_completionist
  inc a
  ld b,a
  ld hl,floor_scores
  .testloop:
    ld a,[hl+]  ; score
    cp [hl]     ; max score
    jr c,.not_completionist
    inc hl
    dec b
    jr nz,.testloop
  ld a,ACH_100PCT
  call achievements_earn
.not_completionist:

  ret

; Earn achievement A
; @return AHL clobbered
achievements_earn:
  add LOW(achievements_found_this_game)
  ld l,a
  adc HIGH(achievements_found_this_game)
  sub l
  ld h,a

  ; Save the first floor on which each achievement was earned.
  ; This means if this achievement was already earned this game,
  ; don't award it again
  bit 7,[hl]
  ret z
  ld a,[cur_floor]
  ld [hl],a

  ; TODO: Save in achievements since power
  ; TODO: Queue achievement for display
  ret

section "achievement_names", ROM0
achievement_names::
  dw ach_100pct_name, ach_100pct_deadend_name, ach_dash_for_door_name
  dw ach_restless_name, ach_no_scope_name
ach_100pct_name: db "Completionist",0
ach_100pct_deadend_name: db "Sink it",0
ach_dash_for_door_name: db "Dash for the door",0
ach_restless_name: db "Restless",0
ach_no_scope_name: db "No scope",0
