;
; Achievements gathering for GB port of Magic Floor
;
; Copyright 2019 Damian Yerrick
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

section "achievements_ram", WRAM0

achievements_found_since_power: ds NUM_ACHIEVEMENTS
last_exit_distance: ds 1
achievements_init_clear_end:

; Floor on which each was earned, or $FF for none
achievements_found_this_game:: ds NUM_ACHIEVEMENTS
; Achievement to be displayed, or $FF for none
ach_display_queue: ds NUM_ACHIEVEMENTS
ach_display_step: ds 1
ach_display_timer: ds 1
ach_wy:: ds 1

section "achievements", ROM0
achievements_init::
  ; In case we decide to show achievements only once per power cycle
  xor a
  ld c,achievements_init_clear_end - achievements_found_since_power
  ld hl,achievements_found_since_power
  jp memset_tiny

achievements_new_game::
  ; Clear
  ld a,$FF
  ld c,NUM_ACHIEVEMENTS * 2  ; this game and display queue
  ld hl,achievements_found_this_game
  call memset_tiny
  xor a
  ld [hl+],a  ; clear state
  ld [hl+],a  ; clear timer
  ld [hl],144  ; move window off screen
  ret

achievements_new_floor::
  ld a,[attract_mode]
  or a
  ret nz
  ; A is 0, so set the achievements display state to 0 (idle)
  ld [ach_display_step],a
  ret

achievements_frame::
  ld a,[attract_mode]
  or a
  ret nz

  if RESTLESS_TRACKS > 0
    ; "Restless": many consecutive tracks without a hesitation
    ld a,[tracks_since_pause]
    cp RESTLESS_TRACKS
    ld a,ACH_RESTLESS
    call nc,achievements_earn
  endc

  ; If exit with less than 100%, or distance to the exit increased
  ; since 100%, "Dash for the door" is not awarded.
  call get_exit_distance
  ld b,a
  ld a,[last_exit_distance]
  cp b
  jr nc,.distance_did_not_increase
    ld hl,move_flags
    set MVFB_RETREATED_SINCE_100,[hl]
  .distance_did_not_increase:
  ld a,b
  ld [last_exit_distance],a

  ; Air rotation preliminary tests
  ld hl,airrot_dir
  ld b,[hl]
  bit 7,b
  jr nz,.not_airrot  ; airrot_dir bit 7: currently on ground
  ld a,[new_keys]
  and $F0
  jr z,.not_airrot  ; no keys pressed

  ; Convert to a direction
  ld c,$FF
  swap a
  .ctzloop:
    inc c
    rra
    jr nc,.ctzloop
  ld a,c
  call facing_to_airrot
  ld [hl+],a  ; Save new direction and point HL to airrot_amt

  ; Calculate the difference
  sub b
  ld b,[hl]  ; A = change in airrot_dir; B = airrot_amt
  rra
  jr c,.airrot1or3
  rra
  jr nc,.not_airrot  ; 0: No change
    ; 2: Clear airrot_amt
    ld b,0
    jr .have_new_airrot_amt
  .airrot1or3:
  rra
  bit 7,b  ; Z = airrot_amt is positive; Cy: direction
  jr c,.airrot3
    ; 1: Clear if negative, then increase
    jr z,.airrot1_noclear
      ld b,0
    .airrot1_noclear:
    inc b
    jr .have_new_airrot_amt
  .airrot3:
    ; 3: Clear if positive, then decrease
    jr nz,.airrot3_noclear
      ld b,0
    .airrot3_noclear:
    dec b
  .have_new_airrot_amt:
    ld [hl],b

    ; Is it a full rotation (+4 or -4)?
    ld a,b
    and $07
    cp 4
    ld a,ACH_AIRROT
    call z,achievements_earn
  .not_airrot:

  ; Now the achievements display engine state machine
  ld a,[ach_display_step]
  ld de,ach_display_step_handlers
  call de_index_a
  jp hl

achievements_end_floor::
  ld a,[attract_mode]
  or a
  ret nz

  ; "Sink it": Reach 100% by moving to a dead end
  ld a,[move_flags]
  bit MVFB_MOVED_SINCE_100,a
  jr nz,.not_sink_it
    ld a,ACH_100PCT_DEADEND
    call achievements_earn
    jr .not_dash_for_the_door
  .not_sink_it:

  ; "Dash for the door": Clear without having hesitated or increased
  ; Manhattan distance from door since reaching 100%
  bit MVFB_PAUSED_SINCE_100,a
  jr nz,.not_dash_for_the_door
  bit MVFB_RETREATED_SINCE_100,a
  ld a,ACH_DASH_FOR_DOOR
  call z,achievements_earn
.not_dash_for_the_door:

  ; "No peeking": Clear without having hesitated long enough to
  ; lift your head since first move
  ld a,[move_flags]
  bit MVFB_PEEKED_SINCE_START,a
  ld a,ACH_NO_PEEKING
  call z,achievements_earn

  if RESTLESS_TRACKS == 0
    ; "Restless": complete entire floor without a hesitation
    ld a,[move_flags]
    bit MVFB_PAUSED_SINCE_START,a
    ld a,ACH_RESTLESS
    call z,achievements_earn
  endc

  ; "Completionist": Finish final floor with all floor scores
  ; equal to maximum
  ld a,[cur_floor]
  cp NUM_FLOORS - 1
  jr nz,.not_completionist
  inc a
  ld b,a
  ld hl,floor_scores
  .testloop:
    ld a,[hl+]  ; score
    cp [hl]     ; max score
    jr c,.not_completionist
    inc hl
    dec b
    jr nz,.testloop
  ld a,ACH_100PCT
  call achievements_earn
.not_completionist:

  ret

; Earn achievement A
; @return AHL clobbered
achievements_earn:
  add LOW(achievements_found_this_game)
  ld l,a
  adc HIGH(achievements_found_this_game)
  sub l
  ld h,a

  ; Save the first floor on which each achievement was earned.
  ; This means if this achievement was already earned this game,
  ; don't award it again
  bit 7,[hl]
  ret z
  ld a,[cur_floor]
  ld [hl],a

  ; TODO: Save in achievements since power

  ; Queue achievement for display
  ld a,l
  sub LOW(achievements_found_this_game)  ; A is once again achievement ID
  ld hl,ach_display_queue - 1
  ; Skip queued achievements
  .queueloop:
    inc hl
    bit 7,[hl]
    jr z,.queueloop
  ld [hl],a
  ret

; Logic for "No scope" achievement
;
; During a hesitation or roll, airrot_dir = $FF and airrot_amt = 0
; During a jump, airrot_dir = facing_to_airrot(dir) and airrot_amt = 0
; Each frame, update airrot:
;   If airrot_dir bit 7 is 1 or (new_keys & $F0) == 0, do nothing
;   new_dir = facing_to_airrot(ctz(new_keys >> 4))
;   Switch (new_dir - airrot_dir) % 4:
;     Case 1: Increase airrot_amt if positive, or set to 1 if negative
;     Case 2: airrot_amt = 0
;     Case 3: Decrease airrot_amt if positive, or set to -1 if positive
;   airrot_dir = new_dir
; If airrot_amt is 4 or -4, earn no scope

;;
; Swaps bits 1 and 0 in A to convert from R, L, U, D (GB key order)
; to R, U, L, D (rotation order)
facing_to_airrot::
  and $03
  rra
  ret nc
  or $02
  ret


; Achievements display ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ach_display_step_handlers:
  dw ach_idle, ach_draw, ach_show

;;
; State 0 (idle)
; If there is an achievement in queue slot 0, write it to the VWF
; line buffer and go to state 1.  Otherwise, shift all items 1 slot ahead.
ach_idle:
  ld hl,ach_display_queue
  ld c,[hl]
  ; Move items other than C 1 step forward in the queue
  ld b,NUM_ACHIEVEMENTS - 1
  .shiftloop:
    inc hl
    ld a,[hl-]
    ld [hl+],a
    dec b
    jr nz,.shiftloop
  ld [hl],$FF

  ; If bit 7 of C is set, it's not an achievement to be drawn
  bit 7,c
  ret nz

  ; Clear buffer and get name of achievement C
  push bc
  call vwfClearBuf
  pop bc
  ld a,c
  ld de,achievement_names
  call de_index_a

  ; Set up next step and draw name
  xor a
  ld b,a
  ld [ach_display_timer],a
  inc a
  ld [ach_display_step],a
  call vwfPuts
  ld a,9
  jp audio_play_fx

ach_draw:
  ; If too full, don't fill it further
  ld hl,popslide_used
  ld a,[hl]
  cp 72
  ret nc
  ld l,a

  ; calculate packet header, assuming (EARNED_NAME_BASE & 0x0F) == 0
  ld a,[ach_display_timer]
  ld e,a
  add a
  ld d,HIGH(lineImgBuf)
  ld [hl+],a
  ld a,(CHRRAM0>>8)+(EARNED_NAME_BASE>>4)
  ld [hl+],a
  ld a,63
  ld [hl+],a
  inc hl

  ; copy vwf line buffer to packet body
  ld bc,4|$FF00
  call vwfPutBuf03_continue_lenC
  ld a,l
  ld [popslide_used],a

  ; move to next 4-tile chunk
  ld hl,ach_display_timer
  ld a,[hl]
  add 32
  ld [hl],a
  cp 8 * EARNED_NAME_NTILES
  ret c

  ; after last chunk, set timer and go to next step
  xor a
  ld [hl-],a
  inc [hl]
  ret

ach_show:
  ld hl,ach_display_timer
  ld a,[hl]
  inc [hl]
  cp 192
  ld hl,ach_wy
  ld a,[hl]
  ; At this point:
  ; HL = pointer to Y coordinate, A = Y coordinate
  ; Cy = 1 if scrolling in, 0 if scrolling out
  jr nc,.scroll_out
    dec a
    cp 126 ; 2 pixels above the status bar top
    ret c
    ld [hl],a
    ret
  .scroll_out:
  inc a
  ld [hl],a
  cp 144
  ret c

  ; Done!
  xor a
  ld [ach_display_step],a
  ret

; Achievement strings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "achievement_names", ROM0
achievement_names::
  dw ach_100pct_name, ach_100pct_deadend_name, ach_dash_for_door_name
  dw ach_no_peeking_name, ach_restless_name, ach_airrot_name
ach_100pct_name: db "Completionist",0
ach_100pct_deadend_name: db "Sink it",0
ach_dash_for_door_name: db "Dash for the door",0
ach_no_peeking_name: db "No peeking",0
ach_restless_name: db "Restless",0
ach_airrot_name: db "No scope",0
