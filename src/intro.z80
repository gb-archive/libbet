include "src/hardware.inc"
include "src/global.inc"

; A 1 KiB (64 tile) buffer used for data decompression
; (and which can be used for other purposes)
section "decompbuf", wram0, align[8]
decompbuf:: ds $200

def KICK_TRIGGER_X equ 132
def KICK_STARTING_X equ (4+12)*8 + 8
def KICK_STARTING_Y equ 8*8 + 16

section "intro", ROM0
load_rolling_girl_tiles::

  ; Decompress frame 1 of the animation
  ld de, roll32_chr
  ld hl, decompbuf
  ld b, 16
  call pb16_unpack_block
  push de
  ld de, $8400
  call .copy_one_half

  ; Decompress frame 2
  pop de
  ld hl, decompbuf
  ld b, 16
  call pb16_unpack_block
  ld de, $8500
.copy_one_half:

  ; Copy the unrotated cel to VRAM
  push de
  ld hl, decompbuf
  ld c, 16*2
  call popslide_hblank_copy

  ; Rotate the cel by 90 degrees
  ld d, high(decompbuf) + 0
  ld h, high(decompbuf) + 1
  call rotate_4x4_tiles

  ; Copy the rotated cel 32 tiles later in VRAM
  pop de
  inc d
  inc d
  ld hl, decompbuf + 256
  ld c, 16*2
  jp popslide_hblank_copy

;;
; Rotates the column-major 4x4-tile image at D*$100 clockwise by
; 90 degrees to form an image at H*$100.
rotate_4x4_tiles:
  ld e, $00
  ld a, $C0
  .each_tile:
    ; at this point, A = destination address low byte
    ld c, a
    .each_sliver:
      ld l, c
      ld a, [de]
      inc e
      scf     ; shift sentinel bit into bit 0 so that when it's
      adc a   ; shifted out, this sliver is done
      ld b, a
      ld a, [de]
      inc e
      .each_bit:
        rr [hl]
        inc l
        add a
        rr [hl]
        inc l
        sla b
        jr nz, .each_bit
      ld a, $0F
      and e
      jr nz, .each_sliver
    ld a, c
    sub $40
    jr nc, .each_tile
    add $10
    jr nz, .each_tile
  ret

intro_draw_character:
  ld a, [cursor_y]
  ld b, a  ; bit 4: flip?
  and $0C  ; bits 3, 2: starting pos
  add a
  add a
  add $40
  ldh [draw_metasprite.hmsprBaseTile], a
  ld a, b
  and $10
  swap a
  ldh [draw_metasprite.hmsprFrame], a

  ld a, [cursor_x]
  sub 16
  ldh [draw_metasprite.hmsprXLo], a
  sbc a
  ldh [draw_metasprite.hmsprXHi], a
  ld a, 88
  ldh [draw_metasprite.hmsprYLo], a
  ld a, 1
  ldh [draw_metasprite.hmsprSheetID], a
  xor a
  ldh [draw_metasprite.hmsprAttr], a
  ldh [draw_metasprite.hmsprYHi], a
  call draw_metasprite
  fallthrough intro_kick_check

;;
; moves the (R) symbol
intro_kick_check:
  ; Do this only on mono
  ld a, [initial_a]
  xor $11
  ret z

  ; Has it already moved far enough?
  ld a, [r_symbol_kick_dist]
  cp (168 - KICK_STARTING_X) / 6
  ret nc

  ; Draw (R) at distance A
  ld hl, oam_used
  ld l, [hl]
  ld b, a  ; B = kick_distance
  add a
  add b
  ld b, a  ; B = kick_distance * 3
  cpl  ; A = 255 - kick_distance * 3
  add 1 + KICK_STARTING_Y
  ld [hl+], a
  ld a, b
  add a  ; kick_distance * 6
  add KICK_STARTING_X
  ld [hl+], a
  ld [hl], $19
  inc l
  xor a
  ld [hl+], a
  ld a, l
  ld [oam_used], a

  ; Do we need to kick?
  ld hl, r_symbol_kick_dist
  ld a, [hl]
  or a
  jr nz, .already_kicked
  ; Not already kicked:
    ld a, [cursor_x]
    cp KICK_TRIGGER_X
    ret c  ; Not yet far enough
    ; Set r_symbol_kick_dist to nonzero for the first time
    inc [hl]
    ld a, 2
    jp audio_play_fx
  .already_kicked:
    inc [hl]
    ret

; $8000: Console maker logo
; $8190: (R) sign if initial_a != $11
; $8400: Libbet's cels
; $8800: Copyright notice
; $8C00: End

show_intro::
  ld a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJON
  ld [vblank_lcdc_value],a
  ldh [rLCDC], a
  ld a, IEF_VBLANK
  ldh [rIE], a

  call load_rolling_girl_tiles
  call gbc_fade_init
  call fade_in
  ld a, 32
  ld [fade_level], a

  ; Write notice to the VWF area
  ld hl, coprNotice
  ld de, $8800
  .vwflineloop:
    push de  ; destination address in VRAM
    push hl  ; string position in ROM
    call vwfClearBuf
    pop hl
    ld b, 0
    call vwfPuts
    push hl
    ld b, 0
    ld hl, decompbuf
    call vwfPutBuf03
    pop hl
    pop de
    push de
    push hl
    ld hl, decompbuf
    ld c, 256/8
    call popslide_hblank_copy
    pop hl
    pop de
    inc d
    inc hl
    ld a, d
    cp $8C
    jr nz, .vwflineloop

  ; Now that decompbuf is done: Take starting positions
  call wait_vblank_irq
  ld a, %00001100
  call set_bgp
  ld a, %00011100
  ld [fade_obp0], a
  xor a
  ld [cursor_y], a
  ld [cursor_x], a
  ldh [rSCY], a  ; clear the scroll position in case debrief set it
  ldh [rSCX], a
  ; Move the (R) from tilemap to sprite
  ld [_SCRN0+8*32+16], a
  ld [oam_used], a
  call intro_kick_check
  call lcd_clear_oam
  call run_dma
  ld hl, intro_obj_palette
  ld a, $82
  ld bc, ((intro_obj_palette_end - intro_obj_palette) << 8) | low(rOCPS)
  call set_gbc_palette

  .roll_loop:
    ; Move sprite
    ld a, [cursor_x]
    add 3
    ld [cursor_x], a

    ; Play a rolling sound effect every 32 frames
    ld hl, cursor_y
    ld a, [hl]
    inc [hl]
    and $1F
    jr nz,.no_sfx
      ; ld a, 0
      call audio_play_fx
    .no_sfx:

    ; Draw the sprite
    xor a
    ld [oam_used], a
    call intro_draw_character
    call lcd_clear_oam

    ; fade_update in the intro is needed only on DMG, not SGB
    ld a, [initial_a]
    cp $11
    jr z, .no_fade_update
    ld a, [hw_capability]
    or a
    call z, fade_update
    .no_fade_update:

    call audio_update

    call wait_vblank_irq
    call run_dma
    ld a, [fade_obp0]
    ldh [rOBP0], a

    ; Wipe away logo
    ld a, [cursor_x]
    sub 36
    jr c,.nowipe
    cp 128
    jr nc,.nowipe
      rrca
      rrca
      rrca
      or $E0
      add 2
      ld l, a
      ld h, $98
      ld de, 32
      sub $E2-$80  ; tiles $80-$BF are VWF canvas
;      xor a  ; CHANGE THIS to change what tile is drawn
      ld [hl], a
      add hl, de
      add 16
      ld [hl], a
      add hl, de
      add 16
      ld [hl], a
      add hl, de
      add 16
      ld [hl], a
    .nowipe:

    ld a, [cursor_x]
    cp 192
    jp c, .roll_loop

  ld bc, 180 * 256 + 120
  .vtimeout:
    push bc
    call read_pad
    call audio_update
    pop bc
    call wait_vblank_irq
    ; C unskippable vblanks, then B skippable ones
    dec c
    jr nz, .vtimeout
    dec b
    jr z,.closestart
    inc c
    ld a,[new_keys]
    and PADF_START|PADF_A
    jr z, .vtimeout
  .closestart:

  ld a, 1  ; jump
  call audio_play_fx
  ld hl, intro_close_scroll
  .closeloop:
    push hl
    call read_pad
    call audio_update
    call wait_vblank_irq
    pop hl
    ld a, [hl+]
    ldh [rSCY], a
    ld a, l
    cp low(intro_close_scroll_end)
    jr nz, .closeloop

  ret

roll32_chr:  incbin "obj/gb/roll32-h.2bpp.pb16"

; 4x4 column major (was previously considering 8x16 but decided
; against it given title screen uses 8x8)
fourbyfourCM_mspraddrs::
  dw fourbyfourCM_mspr
  dw fourbyfourCMflip_mspr

fourbyfourCM_mspr:
  ;  Y   X   Att  Tile
  ;  pos pos Len  IDs
  db  96,112,$60, $00,$04,$08,$0C
  db 104,112,$60, $01,$05,$09,$0D
  db 112,112,$60, $02,$06,$0A,$0E
  db 120,112,$60, $03,$07,$0B,$0F
  db 0

fourbyfourCMflip_mspr:
  ;  Y   X   Att  Tile
  ;  pos pos Len  IDs
  db  96,112,$60, $CF,$CB,$C7,$C3
  db 104,112,$60, $CE,$CA,$C6,$C2
  db 112,112,$60, $CD,$C9,$C5,$C1
  db 120,112,$60, $CC,$C8,$C4,$C0
  db 0

intro_close_scroll:
  db 1, 2, 3, 4, 4, 3, 2, 1, 0, -2, -4, -7, -10, -14, -18, -23
  db -28, -34, -40, -47, -54, -62, -70, -79, -88, -88
intro_close_scroll_end:

def LF equ $0A
def COPR equ $1A
coprNotice:
 db "",LF
 db COPR," 2002, 2012 Martin Korth",LF
 db COPR," 2018, 2024 Damian Yerrick",LF
 db "",0

intro_obj_palette:
  drgb $382000
  drgb $f87858
  drgb $f8f858
  drgb $FFFFFF
  drgb $000000
intro_obj_palette_end:
