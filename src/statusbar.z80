;
; Status bar for GB port of Magic Floor
;
; Copyright 2002, 2012 Martin Korth [concept]
; Copyright 2018, 2019 Damian Yerrick [program]
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

SMALL_DIGIT_BASE equ $D0
STATUS_SLASH equ $F6
STATUS_BLANK equ $F7
BIG_DIGIT_BASE equ $E0
SPRITE_BIG_DIGIT_BASE equ $60
STATUS_PERCENT equ $F4
STATUSBAR_CHR_COUNT equ 40
export SPRITE_BIG_DIGIT_BASE

; The status bar is and occupies the last two rows of the tilemap
SCRN_STATUS     equ SCRN_BG+32*16
SMALL_SCORE_POS equ SCRN_STATUS+32+14
COMBO_POS       equ SCRN_STATUS+1
PCTAGE_POS      equ SCRN_STATUS+9
DEBUGHEX_POS    equ SCRN_STATUS+15

EARNED_LABEL_BASE equ $8C
EARNED_LABEL_NTILES equ 6
EARNED_BLANK equ $91
EARNED_NAME_BASE equ $80
EARNED_NAME_NTILES equ 12
export EARNED_NAME_BASE, EARNED_NAME_NTILES

COMBO_LABEL_BASE = $FC
COMBO_LABEL_NTILES = 4

section "debughex", WRAM0
debughex:: ds 2

section "load_statusbar", ROM0

;;
; Expands 1bpp tiles to shadowed 2bpp
load_statusbar_chr::
  if USE_DEBUGHEX
    ld hl,debughex
    ld a,$C0
    ld [hl+],a
    ld [hl],$DE
  endc

  ; Load small and large digits with shadow
  ld de,bigdigits_chr
  ld hl,$8000 + SMALL_DIGIT_BASE * 16
  ld bc,(STATUSBAR_CHR_COUNT<<8)|$FF  ; B: tilecount; C: notlastbyte
  .byteloop:
    ; Plane 0 is thisbyte | ~lastbyte
    ld a,[de]
    or c
    ld [hl+],a
    ; Plane 1 is thisbyte
    ld a,[de]
    inc de
    ld [hl+],a
    rra
    cpl
    ld c,a
    ; 16 byte units
    ld a,l
    and $0F
    jr nz,.byteloop
    dec b
    jr nz,.byteloop

  ; Word "Combo"
  call vwfClearBuf
  ld hl,combo_msg
  ld b,4
  call vwfPuts
  ld hl,CHRRAM0+16*COMBO_LABEL_BASE
  push hl
  ld bc,$FF00 | COMBO_LABEL_NTILES
  call vwfPutBuf03_lenC
  pop hl
  ; Convert from 0 and 3 to 1 and 3
  ld a,$FF
  ld b,COMBO_LABEL_NTILES*8
  .combo_colorize:
    ld [hl+],a
    inc hl
    dec b
    jr nz,.combo_colorize

  ; Load sprite versions of large digits into tiles $60-$69
  ; for use in "oh no, combo stopped!"
  ld hl, CHRRAM0+16*BIG_DIGIT_BASE
  ld de, CHRRAM0+16*SPRITE_BIG_DIGIT_BASE
  ld b, 16*10
.copy_big_digits:
  ; Map colors from 0, 1, 3 to 0, 0, 1
  ; new plane 0 = old plane 1
  inc hl
  ld a, [hl+]
  ld [de], a
  inc de
  ; new plane 0 = 0
  xor a
  ld [de], a
  inc de
  dec b
  jr nz, .copy_big_digits

  ; Achievements and attract mode don't run at once.
  ; Attract mode uses BG tiles $80-$BF for instruction text
  ; Achievements use BG tiles $80-$91
  ld a,[attract_mode]
  or a
  ret nz

  ; Space for achievement name
  call vwfClearBuf
  ld hl,earned_msg
  ld b,0
  call vwfPuts
  ld hl,CHRRAM0+16*EARNED_LABEL_BASE
  ld bc,$FF00 | EARNED_LABEL_NTILES
  call vwfPutBuf03_lenC
  ld hl,CHRRAM0+16*EARNED_NAME_BASE
  ld c,low(EARNED_NAME_NTILES * 16)
  xor a
  jp memset_tiny

;;
; Draws the unchanging parts of the status bar and prepares the
; current score in Popslide buffer.
draw_statusbar_tilemap::

  ; Prepare window for display of achievements
  ld hl,SCRN_WIN
  ld a,EARNED_BLANK
  ld c,32*2+14
  call memset_tiny
  ld hl,SCRN_WIN+32*0+1
  ld a,EARNED_LABEL_BASE
  ld c,EARNED_LABEL_NTILES
  call memset_inc
  ld hl,SCRN_WIN+32*1+1
  ld a,EARNED_NAME_BASE
  ld c,EARNED_NAME_NTILES
  call memset_inc

  ; Clear status bar to solid blank tiles
  ld hl, SCRN_STATUS
  ld a,STATUS_BLANK
  ld c,32+20
  call memset_tiny
  ; HL is at end of status bar

  ; Draw combo label
  ld hl,COMBO_POS+32*1+2
  ld a,COMBO_LABEL_BASE
  ld c,COMBO_LABEL_NTILES
  call memset_inc

  ; Draw percent sign
  ld a,STATUS_PERCENT
  ld [PCTAGE_POS+3],a
  inc a
  ld [PCTAGE_POS+35],a

  ; Draw a slash, then maximum score in decimal
  ld l,low(SMALL_SCORE_POS+2)
  ld a,STATUS_SLASH
  ld [hl+],a
  ld a,[max_score]
  call bcd8bit_baa
  ld c,a
  swap a
  and $0F
  or SMALL_DIGIT_BASE
  ld [hl+],a
  ld a,c
  and $0F
  or SMALL_DIGIT_BASE
  ld [hl+],a
  ; fall through

;;
; Draws the current score as percentage and number of tracks
; to Popslide buffer.
prepare_pctage::
  ld hl,popslide_used
  ld l,[hl]

  ; Write packet header for raw score
  ld a,low(SMALL_SCORE_POS)
  ld [hl+],a
  ld a,high(SMALL_SCORE_POS)
  ld [hl+],a
  ld a,1  ; h literal of 2
  ld [hl+],a
  inc hl

  ; Convert current score to decimal
  ld a,[cur_score]
  call bcd8bit_baa  ; tens and ones in A
  ld c,a
  swap a
  and $0F
  jr nz,.score_more_than_ten
    ld a,STATUS_BLANK-SMALL_DIGIT_BASE
  .score_more_than_ten:
  add SMALL_DIGIT_BASE
  ld [hl+],a
  ld a,c
  and $0F
  add SMALL_DIGIT_BASE
  ld [hl+],a

  ; Top line of percentage
  ld a,low(PCTAGE_POS)
  ld [hl+],a
  ld a,high(PCTAGE_POS)
  ld [hl+],a
  ld a,2
  ld [hl+],a

  ; Convert current score to decimal percentage
  ld a,[max_score]
  ld c,a
  ld a,[cur_score]
  cp c
  jr c,.not_100percent
    ld de,BIG_DIGIT_BASE * $101
    ld a,BIG_DIGIT_BASE + 2
    jr .have_pctage_tiles_ade
  .not_100percent:
    ld b,a
    call pctdigit
    add a
    jr nz,.pctage_tens_nonblank
      ld a, STATUS_BLANK-BIG_DIGIT_BASE
    .pctage_tens_nonblank:
     add BIG_DIGIT_BASE
    ld d,a
    push de
    call pctdigit
    pop de
    add a
    add BIG_DIGIT_BASE
    ld e,a
    ld a,STATUS_BLANK
  .have_pctage_tiles_ade:

  ld c,a
  ld [hl+],a
  cp STATUS_BLANK
  jr z,.hundreds_is_blank
    inc c
  .hundreds_is_blank:
  ld a,d
  ld [hl+],a
  cp STATUS_BLANK
  jr z,.tens_is_blank
    inc d
  .tens_is_blank:
  ld a,e
  ld [hl+],a
  inc e

  ; Write bottom row
  ld a,low(PCTAGE_POS + 32)
  ld [hl+],a
  ld a,high(PCTAGE_POS + 32)
  ld [hl+],a
  ld a,2
  ld [hl+],a
  ld a,c
  ld [hl+],a
  ld a,d
  ld [hl+],a
  ld a,e
  ld [hl+],a

  ; Top line of combo
  ld a,low(COMBO_POS)
  ld [hl+],a
  ld a,high(COMBO_POS)
  ld [hl+],a
  ld a,1
  ld [hl+],a
  inc l
  ld a,[tracks_since_pause]
  call bcd8bit_baa
  ld c,a
  rrca
  rrca
  rrca
  and $0F<<1
  jr nz,.combo_more_than_ten
    ld a,STATUS_BLANK-BIG_DIGIT_BASE
  .combo_more_than_ten:
  add BIG_DIGIT_BASE
  ld [hl+],a
  ld d,a
  cp STATUS_BLANK
  jr z,.combo_not_more_than_ten
    inc d
  .combo_not_more_than_ten:
  ld a,c
  and $0F
  add a
  add BIG_DIGIT_BASE
  ld [hl+],a
  inc a
  ld e,a

  ; Bottom row of combo
  ld a,low(COMBO_POS+32)
  ld [hl+],a
  ld a,high(COMBO_POS+32)
  ld [hl+],a
  ld a,1
  ld [hl+],a
  inc l
  ld a,d
  ld [hl+],a
  ld a,e
  ld [hl+],a

  ld a,l
  ld [popslide_used],a
  ret

draw_debughex::
  if USE_DEBUGHEX
  ; Write the header
  ld hl,popslide_used
  ld l,[hl]
  ld a,low(DEBUGHEX_POS)
  ld [hl+],a
  ld a,high(DEBUGHEX_POS)
  ld [hl+],a
  ld a,3
  ld [hl+],a
  inc l

  ; Write 4 digits
  ld a,[debughex+0]
  call .wr1hex
  ld a,[debughex+1]
  call .wr1hex

  ld a,l
  ld [popslide_used],a
  ret

.wr1hex:
  ld b,a
  swap a
  call .wr1dig
  ld a,b
.wr1dig:
  and $0F
  or SMALL_DIGIT_BASE
  ld [hl+],a
  endc
  ret

earned_msg: db "Earned:",0
combo_msg: db "Combo", 0

section "bigdigits_chr", ROM0, align[3]
bigdigits_chr: incbin "obj/gb/bigdigits-h.chr1"
