include "src/hardware.inc"
include "src/global.inc"

LF equ $0A

section "instructions", ROM0

first_vwf_tileid = 256 - 8 * 14

do_instructions::
  call lcd_off
  xor a
  ld [cursor_x],a
  ld de,_SCRN0
  ld h,$80
  ld bc,32*18
  call memset
  ld hl,$8800
  ld c,16
  xor a
  call memset_tiny

  ld de,18
  ld b,16
  ld a,first_vwf_tileid
  ld hl,_SCRN0+32*1+3
  .filltilemaploop:
    ld c,14
    call memset_inc
    add hl,de
    dec b
    jr nz,.filltilemaploop

.page:

  ; Draw the text
  call lcd_off
  ld a,[cursor_x]
  ld de,pages
  call de_index_a
  ld de,CHRRAM0 + first_vwf_tileid * 16
  .lineloop:
    push hl
    call vwfClearBuf
    pop hl
    push de
    ld b,0
    call vwfPuts
    pop de
    push hl
    ld h,d
    ld l,e
    ld bc,14
    call vwfPutBuf03_lenC
    ld d,h
    ld e,l
    pop hl
    ld a,[hl+]
    or a
    jr nz,.lineloop

  call vwfClearBuf
  .clrrestloop:
    ld h,0
    ld bc,14*16
    call memset
    ld hl,$10000-(CHRRAM0 + (224 + first_vwf_tileid) * 16)
    add hl,de
    jr nc,.clrrestloop

  ld a,%00001100
  ldh [rBGP],a
  ld a,LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800
  ld [vblank_lcdc_value],a
  ldh [rLCDC],a

.loop:
  call wait_vblank_irq
  call read_pad
  ld a,[new_keys]
  ld b,a
  ld a,[cursor_x]
  ld c,a

  ; Page movement
  ld a,PADF_RIGHT|PADF_A
  and b
  ld a,c
  jr z,.notRight
  cp (pages_end-pages)/2-1
  jr nc,.notRight
    inc a
  .notRight:
  bit PADB_LEFT, b
  jr z,.notLeft
  or a
  jr z,.notLeft
    dec a
  .notLeft:
  cp c
  jr z,.notRedraw
    ld [cursor_x],a
    jp .page
  .notRedraw:

  bit PADB_START,b
  ret nz
  bit PADB_A,b
  jr z,.loop
  ; A was pressed; return
  ld a,c
  cp (pages_end-pages)/2-1
  jr c,.loop
  ret

section "instructionstxt", ROM0

pages:
 dw page1txt, page2txt, page3txt
pages_end:

page1txt:
 db "Libbet and the",LF
 db "Magic Floor",LF
 db "v0.01 (2018-10-16)",LF
 db LF
 db $82," 2002, 2012 Martin Korth",LF
 db $82," 2018 Damian Yerrick",LF
 db LF
 db "One day, Libbet was",LF
 db "rearranging her basement",LF
 db "when she discovered a",LF
 db "passage to an empty",LF
 db "hall whose floor had a",LF
 db "peculiar pattern. She",LF
 db "rolled in to investigate.",0
page2txt:
 db "The floor tiles have four",LF
 db "shades. Libbet can roll",LF
 db "or jump between tiles of",LF
 db "the same shade.",LF
 db "She can also roll or jump",LF
 db "onto the next brighter",LF
 db "shade or from white to",LF
 db "black. This leaves a track.",LF
 db "Tiles with no exits",LF
 db "contain a trap door that",LF
 db "leads to the entrance.",LF
 db "Leave 90 percent of",LF
 db "possible tracks and roll",LF
 db "to the exit at top to win.",0
page3txt:
 db "Controls",LF
 db LF
 db $86,$87,$85,$84,": Roll",LF
 db "A + ",$86,$87,$85,$84,": Jump",LF
 db LF
 db "Press Start Button",0


; Refactor into attract mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

STATUS_BLANK equ $DB

section "attractstate", WRAM0
attract_src_ptr: ds 2
attract_vwf_tile_id: ds 2
attract_vwf_x: ds 1  ; X = $FF and tile id < $C0 means a clear is in progress

section "attractcode", ROM0

attract_init_vram::
  ; Extend status bar
  ld hl,_SCRN0 + 32*12
  ld a,STATUS_BLANK
  ld c,32*4
  call memset_tiny

  ; Set up VWF canvas on extended status bar
  ld a,$80
  ld hl,_SCRN0 + 32*12 + 2
  ld bc,$0410
  ld de,16
  .msiloop:
    push bc
    call memset_inc
    pop bc
    add hl,de
    dec b
    jr nz,.msiloop

  ; Clear
  ld a,$80
  .clrcanvasloop:
    ld [attract_vwf_tile_id],a
    call attract_clear_half_line
    call popslide_terminate_blit
    ld a,[attract_vwf_tile_id]
    add $08
    cp $C0
    jr c,.clrcanvasloop

  ; This confirms that the VWF canvas is working
  call vwfClearBuf
  ld b,0
  ld hl,htp_msg
  call vwfPuts
  ld a,$80
  ld [attract_vwf_tile_id],a
  call attract_push_vwf_tiles

  ret

;;
; Appends two Popslide packets to fill a line with color 1.
attract_clear_half_line:
  ld hl,popslide_used
  ld l,[hl]
  ld a,l
  add 2 * (4 + 64)
  ld [popslide_used],a

  ; Find the starting pointer
  ld a,[attract_vwf_tile_id]
  swap a
  and $83
  ld e,a
  or high(CHRRAM1)
  ld d,a
  ld a,e
  and $80
  ld e,a
  call .write_4_tiles
  ld a,e
  or $40

;;
; Private entry: Writes one packet of four color $01 tiles with
; destination DA to the Popslide packet at HL
.write_4_tiles:
  ld [hl+],a
  ld a,d
  ld [hl+],a
  ld a,$3F
  ld [hl+],a
  inc hl
  ld c,32
  xor a
  .clrloop:
    cpl
    ld [hl+],a
    cpl
    ld [hl+],a
    dec c
    jr nz,.clrloop
  ret

;;
; Writes the current and next VWF tile to the Popslide buffer
attract_push_vwf_tiles:
  ld hl,popslide_used
  ld l,[hl]
  ld a,[attract_vwf_tile_id]
  swap a
  ld c,a
  ld b,$0F
  cp $F0  ; If on the last tile of a line, write only one tile
  jr nc,.only_one_tile
    ld b,$1F
  .only_one_tile:
  and $F0
  ld [hl+],a  ; header: address low
  xor c
  or high(CHRRAM1)
  ld [hl+],a  ; header: address high
  ld a,b
  ld [hl+],a  ; header: length - 1
  inc l       ; skip unused header byte

  inc b  ; convert to length / 2
  srl b
  ld de,lineImgBuf
  .loop:
    ld a,$FF
    ld [hl+],a
    ld a,[de]
    inc e
    ld [hl+],a
    dec b
    jr nz,.loop

  ld a,l
  ld [popslide_used],a
  ret

section "attractdata", ROM0

attract_map::
 db 3, 0, 0, 1  ; 4
 db 2, 2, 1, 3  ; 3
 db 0, 1, 0, 3  ; 2
 db 3, 2, 2, 1  ; 1
 ;  a  b  c  d

htp_msg: db "HOW TO PLAY",0


AM_R equ $01
AM_L equ $02
AM_U equ $03
AM_D equ $04
AM_RR equ $05
AM_LL equ $06
AM_UU equ $07
AM_DD equ $08

attract_moves:
; Start at c1
; roll/jump on same color:
; b1 b3 a3 b3 b1 c1
  db AM_L, AM_UU, AM_L, AM_R, AM_DD, AM_R
; roll/jump on different colors:
; b1 a1 a2 b2 b3 d3 d2 c2 c3 a3
  db AM_L, AM_L, AM_U, AM_R, AM_U, AM_RR, AM_D, AM_L, AM_U, AM_DD
; dead ends:
; a4 b4 d4 (warp to c1) a1 a2 c2 c4 d4 (warp to c1)
  db AM_U, AM_R, AM_RR
  db AM_LL, AM_U, AM_RR, AM_UU, AM_R
; finish the job:
; b1 b3 a3 a4 c4 c3 c1 a1 a2 c2
  db AM_L, AM_UU, AM_L, AM_U, AM_RR, AM_D, AM_DD, AM_LL, AM_U, AM_RR
; b2 b1 a1 a2 b2 b3 a3 a4 b4 b2
  db AM_L, AM_D, AM_L, AM_U, AM_R, AM_U, AM_L, AM_U, AM_R, AM_DD
; b3 a3 a4 c4 exit
  db AM_U, AM_L, AM_U, AM_RR, AM_U
  db $00
