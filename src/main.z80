;
; GB port of Magic Floor
;
; Copyright 2002, 2012 Martin Korth [concept]
; Copyright 2018, 2019 Damian Yerrick [program]
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

LIBBET_NUM_TILES = 42

section "floorsizes", ROM0
floor_sizes:
  db 2, 8
  db 4, 4
  db 6, 4
  db 6, 6
  db 8, 6
floor_sizes_end:

section "mainvars", WRAM0
cur_floor:: ds 1
attract_mode:: ds 1
floor_scores:: ds (floor_sizes_end - floor_sizes)

; Used by achievements
move_flags:: ds 1
tracks_since_pause:: ds 1
airrot_dir:: ds 1
airrot_amt:: ds 1
r_symbol_kick_dist:: ds 1

; Used to prevent buzz sound from repeating
last_tried_move: ds 1

section "main", ROM0

main::
  ; If not a Super Game Boy, head straight in.
  ld a, [is_sgb]
  or a
  jr z, no_clear_vram_main

  ; This is where we'd send all the SGB enhancements, such as border
  ; and palette.  Currently there are none, but the SGB BIOS still
  ; ignores the first roughly 40 frames after the GB-side boot ROM
  ; jumps to $0100.  So for now, set the screen white, wait a bit,
  ; and continue with VRAM cleared.  This means only DMG/MGB get to
  ; see the (R) fly off.
  xor a
  ldh [rBGP], a
  ld c, 40
  .sgbcountdown:
    call wait_not_vblank
    call busy_wait_vblank
    dec c
    jr nz, .sgbcountdown

; A+B+Select+Start lands here
clear_vram_main:
  call lcd_off
  ld de, $8000
  ld h, e
  ld bc, $2000
  call memset

no_clear_vram_main:
  ; Set up vblank handler
  ld a,IEF_VBLANK
  ldh [rIE],a  ; enable IRQs
  xor a
  ldh [rIF],a  ; Acknowledge any pending IRQs
  ld [nmis],a
  ei

  call audio_init
  call show_intro  ; Roll over the Nintendo logo
skip_intro:
  call do_instructions  ; Title screen

  ; Start a new game or the demo based on which button was pressed
  ; to close the instructions
  ld a,[new_keys]
  and PADF_SELECT
  ld [attract_mode],a

  ; Set up VRAM for the new game
  call lcd_off
  call load_floor_chr
  call load_statusbar_chr
  ld hl,CHRRAM0
  ld de,Libbet_pb16
  ld b,LIBBET_NUM_TILES
  call pb16_unpack_block
  ld bc,2
  call srand
  call run_dma  ; shut up BGB
  xor a
  ld [cur_floor],a
  ldh [rSCX],a
  ldh [rSCY],a
  ld a,7+48
  ldh [rWX],a
  call achievements_new_game

another_floor:
  if RANDOMIZE_SEED
    call rand
    ld a,[nmis]
    xor b
    ld b,a
    call srand
  endc

  xor a
  ldh [rBGP],a
  ldh [rOBP0],a
  ldh [rOBP1],a

  ld a,[attract_mode]
  if USE_ATTRACT_FLOOR
    inc a
  else
    or a
  endc
  jr nz,.load_attract_floor

    ; Generate the floor
    ld a,[cur_floor]
    ld de,floor_sizes
    call de_index_a
    if FORCE_FLOOR_SIZE
      ld hl,FORCE_FLOOR_SIZE
    endc
    ld a,l
    ld [floor_width],a
    ld a,h
    ld [floor_height],a
    call make_good_floor
    call calc_floor_top_row
    jr .have_floor_layout
  .load_attract_floor:
    ld bc,$0404
    ld hl,attract_map
    call make_prefab_floor
    ld a,3
    ld [floor_top_row],a
  .have_floor_layout:

  xor a
  ld [last_tried_move], a
  ld [cur_score],a
  ld [move_flags],a
  ld [tracks_since_pause],a
  ld [airrot_amt],a
  dec a
  ld [airrot_dir],a
  call place_exit

  ; Clear the map
  call lcd_off
  call popslide_init
  ld de,SCRN_BG
  ld bc,32*16
  ld h,$6F  ; background tile
  call memset
  ; uncomment the following if using popslide_test_data
  ; call popslide_test
  call draw_whole_floor
  call cursor_to_home
  call init_player_pos
  call draw_floor_border
  call prepare_exit_door  ; leave exit door in popslide buffer
  call draw_statusbar_tilemap  ; leave score in popslide buffer
  call achievements_new_floor
  call prevcombo_init

  ld a,[attract_mode]
  or a
  jr z,.not_attract_vram
    call attract_init_vram
  .not_attract_vram:

  call fade_in

  ld a,LCDCF_ON|LCDCF_BG9800|LCDCF_SCRNADDR|LCDCF_BGON|LCDCF_OBJON|LCDCF_WINON
  ld [vblank_lcdc_value],a
  ldh [rLCDC],a

forever:

  if 1
  ld a,[move_flags]
  and (1<<MVFB_RETREATED_SINCE_100)|(1<<MVFB_PAUSED_SINCE_100)
  ld [debughex+0],a
  endc

  call move_player_anim
  xor a
  ld [oam_used],a
  call prevcombo_update
  call draw_player
  call lcd_clear_oam
  call fade_update
.restlesswait:
  call draw_debughex
  call wait_vblank_irq
  call run_dma
  call popslide_terminate_blit
  ld a,[fade_bgp]
  ldh [rBGP],a
  ld a,[fade_obp0]
  ldh [rOBP0],a
  ld a,[fade_obp1]
  ldh [rOBP1],a
  ld a,[ach_wy]
  ldh [rWY],a
  call audio_update

  call read_pad

  ; A+B+Select+Start: reset
  ld a,[cur_keys]
  cp PADF_A|PADF_B|PADF_SELECT|PADF_START
  jp z, clear_vram_main

  ; Hold Start: pause (if Restless test harness enabled)
  if SPRING_LOAD_PAUSE
    bit PADB_START,a
    jr nz,.restlesswait
  endc

  ld a,[attract_mode]
  or a
  jr z,.not_attract_startcheck
    ld a,[new_keys]
    bit PADB_START,a
    jp nz, skip_intro
  .not_attract_startcheck:

  ; 90%: Exit just opened
  call check_exit_pct
  call c, mark_exit_open

  call player_can_start_roll
  jr z,.not_begin_move

    ; cursor Y = 255 means Libbet is on the exit door
    ld a,[cursor_y]
    inc a
    jr nz,.not_next_floor
      ; Exit door in attract mode means return to menu
      ld a,[attract_mode]
      or a
      jr z,.next_floor
      jp skip_intro
    .not_next_floor:

    ; Sitting on a dead end after last move?
    call floor_read_at_cursor
    bit FLOORB_DEADEND,a
    jr z,.not_on_deadend
      set FLOORB_ENTERED,a
      call prepare_hDrawCell
      call player_start_fall
      ld a,3
      call audio_play_fx

      ; Not moved since 100%?
      ld a,[move_flags]
      bit MVFB_MOVED_SINCE_100,a
      jr nz,.not_sink_it
        call fade_out
        ld a,-1
        ld [cursor_y],a
        jr .not_begin_move
      .not_sink_it:
      call cursor_to_home
      jr .not_begin_move
    .not_on_deadend:

    ld a,[attract_mode]
    or a
    jr z,.not_attract_keyread
      call attract_update
      bit PADB_START,a
      jr z, .have_keys
      jp skip_intro
    .not_attract_keyread:
      ld a,[cur_keys]
    .have_keys:
    call try_move
  .not_begin_move:

  if SELECT_RESTARTS
  ld a,[new_keys]
  bit PADB_SELECT, a
  jp nz,another_floor
  endc

  call achievements_frame
  jp forever

.next_floor:
  ; Save score for this floor
  ld a,[cur_floor]
  add a
  add LOW(floor_scores)
  ld l,a
  adc HIGH(floor_scores)
  sub l
  ld h,a
  ld a,[cur_score]
  ld [hl+],a
  ld a,[max_score]
  ld [hl],a
  call achievements_end_floor

  ; If not at the end of the game, go to next floor
  ld a,[cur_floor]
  inc a
  ld [cur_floor],a
  cp NUM_FLOORS
  jp c,another_floor
  call debrief
  jp clear_vram_main

try_move:
  ld b,a
  ld hl, last_tried_move
  ld d, [hl]
  ld [hl], a
  xor d
  ld d, a  ; D = nonzero if a move is attempted

  ; Clear the air rotation
  xor a
  ld [airrot_amt],a
  dec a
  ld [airrot_dir],a

  ; Is a button pressed at all?
  ld a,PADF_RIGHT|PADF_LEFT|PADF_UP|PADF_DOWN
  and b
  jr nz,.button_is_pressed
  .hesitated:
    ; Don't count hesitation if already in the exit
    ld a,[cursor_y]
    add a
    ret c
    ; If the player hesitates (doesn't make a valid move) in a given
    ; frame, mark it as such for "No peeking", "Restless", etc.
    ld hl,move_flags
    set MVFB_PAUSED_SINCE_100,[hl]
    set MVFB_PAUSED_SINCE_START,[hl]

    ; If a new move was input, play the wrong move sound
    ld a, [last_tried_move]
    and PADF_RIGHT|PADF_LEFT|PADF_UP|PADF_DOWN
    ld a, 11
    call nz, audio_play_fx

    ; Clear the combo if there is one
    ld a, [tracks_since_pause]
    or a
    ret z

    ; A nonzero combo actually busted
    call prevcombo_set
    xor a
    ld [tracks_since_pause],a
    jp prepare_pctage
  .button_is_pressed:

  ld c,$FF
  swap a
  .ctzloop:
    inc c
    rra
    jr nc,.ctzloop
  ld a,c
  ld [cursor_facing],a  ; Face the pressed direction

  ; Don't try anything else if the move was not freshly input
  ld a, d
  or a
  ret z

  ld a,b
  bit PADB_A,a  ; key A
  jr z,.notjump
    set 2,c  ; mark
  .notjump:
  push bc
  ld a,c
  call is_valid_move
  pop bc
  jr c,.have_valid_move

    ; Check whether it's a roll up from the top row
    ; while the exit is open
    ld a,2  ; roll up
    xor c
    jr nz,.invalid_move
    call check_exitable_cell
    jr c,.roll_to_exit
    .invalid_move:
      ; Making an invalid move is counted as "peeking" for the
      ; No peeking achievement
      ld hl,move_flags
      set MVFB_PEEKED_SINCE_START,[hl]
      jr .hesitated
    .roll_to_exit:

    ; Mark the floor as exited
    ld c,PADB_UP - 4
    call player_start_roll
    ld a,$FF
    ld [cursor_y],a

    ; The exit move flag distinguishes a roll to the exit
    ; from a 100% on a dead end
    ld hl,move_flags
    set MVFB_MOVED_SINCE_100,[hl]
    jp fade_out
  .have_valid_move:

  ; A: 1 for color change (possibly scoring); 0 for not
  ; C: move attempted (0-7); E[5:3]: new Y; E[2:0]: new X;
  ; HL: pointer to destination cell
  push af
  push hl
  push de

  xor a
  ld [last_tried_move], a  ; make this move fresh

  ; If this is a jump, set initial airrot direction
  bit 2, c
  jr z,.not_start_airrot
    ld a,c
    call facing_to_airrot
    ld [airrot_dir],a
  .not_start_airrot:

  call player_start_roll
  ld hl,move_flags
  bit MVFB_MOVED_ONCE,[hl]
  jr nz,.is_not_first_move
    res MVFB_PEEKED_SINCE_START,[hl]
    res MVFB_PAUSED_SINCE_START,[hl]
    set MVFB_MOVED_ONCE,[hl]
  .is_not_first_move:
  set MVFB_MOVED_SINCE_100,[hl]
  pop de
  pop hl
  pop af
  ; restore previous regmap

  or a
  jr z,.move_to_cell_e
    push de
    push hl

    ; Get which track bit corresponds to this move ID
    ld a,c
    and $03
    ld b,a
    inc b
    ld a,$08
    .shlloop:
      rla
      dec b
      jr nz,.shlloop
    ld b,a

    ; See if that track bit is set
    call floor_read_at_cursor
    ld a,[hl]
    cpl
    and b
    jr z,.already_have_track_bit
      or [hl]
      ld [hl],a
      ld a,5
      call audio_play_fx  ; score point sound
      ld hl,tracks_since_pause
      inc [hl]
      ld hl,cur_score
      ld b,[hl]
      inc b
      ld [hl],b

      ; If reached 100%, play fanfare and set up achievement flags
      ld a,[max_score]
      cp b
      call z, mark_exit_open_100pct

      call prepare_hDrawCell
      call prepare_pctage
    .already_have_track_bit:
    pop hl
    pop de

    ; Mark as entered
    set 3,[hl]
  .move_to_cell_e:
  ld a,e
  rra
  rra
  rra
  and $07
  ld [cursor_y],a
  ld a,e
  and $07
  ld [cursor_x],a

  ; 2019-10-21: With prevcombo display added, we immediately reset
  ; the combo to 0 once Libbet stops making valid moves.
  ret

mark_exit_open_100pct:
  ; 100%: Prepare for Sink it and Dash for the door
  ld hl, move_flags
  ld a, [hl]
  and ~((1<<MVFB_PAUSED_SINCE_100) | (1<<MVFB_MOVED_SINCE_100) | (1<<MVFB_RETREATED_SINCE_100))
  ld [hl], a
  ; fall through
mark_exit_open:
  ld a,6
  call audio_play_fx
  call prepare_exit_door
  jp fade_in

section "Libbet_chr", ROM0
Libbet_pb16:
  incbin "obj/gb/Libbet.chrgb.pb16"
